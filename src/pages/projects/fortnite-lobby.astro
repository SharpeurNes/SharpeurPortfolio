---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
---


<Layout title="Sharpeur - C# and NodeJS Developer">


    <div class="app-container">
        <Header currentPage="" />
        
        <main>
            <div class="section-header">
                        <h1>Fortnite Lobby</h1>
                        <p>
                            Recreation of the Fortnite main menu and integration of emotes/dances, testable online with Unity's WebGL (when finished). Project made for fun.
                        </p><br>
                        <p style="color: red;">⚠️ This is a test build unfinished and still not polished ⚠️</p>
                    </div>
            
            <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas" width=960 height=540 tabindex="-1"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-warning"> </div>
      
      <div id="unity-footer">
        <div id="unity-logo-title-footer"></div>
        <div id="unity-fullscreen-button"></div>
      </div>
    </div>
    <script>
      var canvas = document.querySelector("#unity-canvas");

      // Shows a temporary message banner/ribbon for a few seconds, or
      // a permanent error message on top of the canvas if type=='error'.
      // If type=='warning', a yellow highlight color is used.
      // Modify or remove this function to customize the visually presented
      // way that non-critical warnings and error messages are presented to the
      // user.
      function unityShowBanner(msg, type) {
        var warningBanner = document.querySelector("#unity-warning");
        function updateBannerVisibility() {
          warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
        }
        var div = document.createElement('div');
        div.innerHTML = msg;
        warningBanner.appendChild(div);
        if (type == 'error') div.style = 'background: red; padding: 10px;';
        else {
          if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
          setTimeout(function() {
            warningBanner.removeChild(div);
            updateBannerVisibility();
          }, 5000);
        }
        updateBannerVisibility();
      }

      var buildUrl = "Build";
      var loaderUrl = "../xd-fortnite-lobby/test-build/Build/Builds.loader.js";
      var config = {
        arguments: [],
        dataUrl: "../xd-fortnite-lobby/test-build/Build/Builds.data.br",
        frameworkUrl: "../xd-fortnite-lobby/test-build/Build/Builds.framework.js.br",
        codeUrl: "../xd-fortnite-lobby/test-build/Build/Builds.wasm.br",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "Sharpeur",
        productName: "FortniteLobby",
        productVersion: "0.1.0",
        showBanner: unityShowBanner,
      };

      // By default, Unity keeps WebGL canvas render target size matched with
      // the DOM size of the canvas element (scaled by window.devicePixelRatio)
      // Set this to false if you want to decouple this synchronization from
      // happening inside the engine, and you would instead like to size up
      // the canvas DOM size and WebGL render target sizes yourself.
      // config.matchWebGLToCanvasSize = false;

      // If you would like all file writes inside Unity Application.persistentDataPath
      // directory to automatically persist so that the contents are remembered when
      // the user revisits the site the next time, uncomment the following line:
      // config.autoSyncPersistentDataPath = true;
      // This autosyncing is currently not the default behavior to avoid regressing
      // existing user projects that might rely on the earlier manual
      // JS_FileSystem_Sync() behavior, but in future Unity version, this will be
      // expected to change.

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        // Mobile device style: fill the whole browser client area with the game canvas:

        var meta = document.createElement('meta');
        meta.name = 'viewport';
        meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';
        document.getElementsByTagName('head')[0].appendChild(meta);
        document.querySelector("#unity-container").className = "unity-mobile";
        canvas.className = "unity-mobile";

        // To lower canvas resolution on mobile devices to gain some
        // performance, uncomment the following line:
        // config.devicePixelRatio = 1;


      } else {
        // Desktop style: Render the game canvas in a window that can be maximized to fullscreen:
        canvas.style.width = "960px";
        canvas.style.height = "540px";
      }

      document.querySelector("#unity-loading-bar").style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          document.querySelector("#unity-progress-bar-full").style.width = 100 * progress + "%";
              }).then((unityInstance) => {
                document.querySelector("#unity-loading-bar").style.display = "none";
                document.querySelector("#unity-fullscreen-button").onclick = () => {
                  unityInstance.SetFullscreen(1);
                };

              }).catch((message) => {
                alert(message);
              });
            };

      document.body.appendChild(script);

    </script>

        </main>

        <Footer author="Sharpeur" />
    </div>
</Layout>

<style>
    body { padding: 0; margin: 0 }
#unity-container { display: flex; flex-direction: column; }
#unity-container.unity-desktop { left: 50%; top: 50%; justify-content: center; align-items: center;}
#unity-container.unity-mobile { width: 100%; height: 100% }
#unity-canvas { background: #231F20 }
.unity-mobile #unity-canvas { width: 100%; height: 100% }
#unity-loading-bar { position: absolute; left: 50%; top: 50%; transform: translate(-50%, 85%); display: none }
#unity-logo { width: 154px; height: 130px; background: url('../xd-fortnite-lobby/test-build/TemplateData/unity-logo-dark.png') no-repeat center }
#unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; margin-left: 6.5px; background: url('../xd-fortnite-lobby/test-build/TemplateData/progress-bar-empty-dark.png') no-repeat center }
#unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('../xd-fortnite-lobby/test-build/TemplateData/progress-bar-full-dark.png') no-repeat center }
#unity-footer { position:flex; justify-content: space-between; align-items: center; width: 60%; }
.unity-mobile #unity-footer { display: none;}
#unity-logo-title-footer { float:left; width: 102px; height: 38px; background: url('../xd-fortnite-lobby/test-build/TemplateData/unity-logo-title-footer.png') no-repeat center }
#unity-build-title { float: right; margin-right: 10px; line-height: 38px; font-family: arial; font-size: 18px }
#unity-fullscreen-button { cursor:pointer; float: right; width: 38px; height: 38px; background: url('../xd-fortnite-lobby/test-build/TemplateData/fullscreen-button.png') no-repeat center }
#unity-warning { position: absolute; left: 50%; top: 5%; transform: translate(-50%); background: white; padding: 10px; display: none }


    .section-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .section-header h1 {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 1rem;
        background: linear-gradient(
            135deg,
            var(--text-light) 0%,
            var(--primary-purple) 100%
        );
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .section-header p {
        font-size: 1rem;
        color: var(--text-muted);
        max-width: 600px;
        margin: 0 auto;
    }

    main {
        flex: 1;
        padding: 2rem 0;
    }
</style>